/**
 * Define a grammar called Expressions
 */
grammar Expressions;

@header {    // Define name of package for generated Java files. 
    package generated;
}

// Syntax Specification ==> Context-free Grammar
start: methodDef* maindef methodDef*;

maindef: 'void main' typeList '{' stmt* '}';

stmt:
	expr ';'
	| assign
	| declare
	| ifstmt
	| whilestmt
	| print
	| methodDef
	| methodCall
	| returnstmt;

expr:
	'(' expr ')'
	| expr ('*' | '/') expr
	| expr ('+' | '-') expr
	// Line below generated by AI
	| expr ('>' | '<' | '>=' | '<=' | '==' | '!=') expr
	| (INT | FLOAT | BOOL | ID | STRING | CHAR)
	| ID '[' expr ']' // array indexing
	| ID '.' 'length' // array length
	| methodCall;

// common blocks
stmtBlock: '{'? stmt* '}'? | stmt;
exprBlock: '{'? expr* '}'?;
exprList: '{'? expr (',' expr)* '}'?;
typeList: '(' TYPE ID? (',' TYPE ID?)* ')' | ('(' ')');
newArray: 'new' TYPE '[' expr ']';

// assign and declare could potentially be combined into one rule
declare: TYPE ID ('[' ']')? ';';
assign:
	TYPE? ID ('[' expr ']')? '=' (expr | newArray | exprList) ';';

// flow
ifstmt: 'if' expr stmtBlock elsePart?;
elsePart: 'else' (ifstmt)? stmtBlock;
whilestmt: 'while' expr stmtBlock;
returnstmt: 'return' (stmt | expr)*;
print: 'print' 'ln'? '(' '"'? expr? '"'? ')' ';';

// method calls and definitions
methodCall:
	ID '(' exprList? ')' ';'? // Method call without assignment
	| TYPE? ID '=' ID '(' exprList? ')' ';'?; // Method call with assignment
methodDef: TYPE ID typeList stmtBlock;

// Lexer Specification ==> Regular Expressions Only non-trivial expressions. Trivial token
// definitions are hard coded in grammar.
INT: '0' | ('-' |) ('1' ..'9') ('0' ..'9')*;
FLOAT: '0.0' | ('-' |) ('0' ..'9')* '.' ('0' ..'9')*;
BOOL: 'true' | 'false';
ID: ('a' ..'z' | 'A' ..'Z' | '_')+; // allows hello_team and _hello_team
STRING: '"' (~'"')* '"'; // anything expect double quote
CHAR: '\'' ~'\'' '\''; // anytihng expect single quote
WS: [ \t\r\n]+ -> skip;

// is there a way to esacpe the empty space trailing the type?
TYPE:
	' '? (
		'int'
		| 'float'
		| 'bool'
		| 'void'
		| 'char'
		| 'string'
		| 'int[]'
		| 'float[]'
		| 'bool[]'
		| 'char[]'
		| 'string[]'
	) ' '?;

// Comments |Â line below generated by AI
COMMENT: '#' (~[\r\n])* -> skip;
// end ai gen