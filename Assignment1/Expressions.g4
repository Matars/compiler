/**
 * Define a grammar called Expressions
 */
grammar Expressions;

@header {    // Define name of package for generated Java files. 
    package generated;
}

// Syntax Specification ==> Context-free Grammar
start: methodDef* maindef methodDef*;

maindef:
	'void main' '(' (TYPE ID (',' TYPE ID)*)? ')' '{' stmt* '}';

stmt:
	expr ';'
	| assign
	| declare
	| ifstmt
	| whilestmt
	| print
	| println
	| methodDef
	| methodCall
	| returnstmt;

expr:
	'(' expr ')'
	| expr ('*' | '/') expr
	| expr ('+' | '-') expr
	// Line below generated by AI
	| expr ('>' | '<' | '>=' | '<=' | '==' | '!=') expr
	| (INT | FLOAT | BOOL | ID | STRING | CHAR)
	| ID '[' expr+ ']' // array indexing
	| ID '.length' // array length
	| methodCall;

declare:
	TYPE ID ('[' ']')? ';'; // Support for 1D array declarations

assign:
	TYPE? ID ('[' expr ']')? '=' (
		expr
		| 'new' TYPE '[' expr? ']'
		| '{' (expr (',' expr)*)? '}'
	) ';'; // Support for 1D array assignments and initialization lists
// Support for 1D array assignments

ifstmt: 'if' '(' expr ')' '{'? stmt* '}'? elsePart?;

elsePart:
	'else' (
		'if' '(' expr ')' '{' stmt* '}' elsePart?
		| '{' stmt* '}'
	)?;

whilestmt: 'while' '(' expr ')' '{' stmt* '}';

returnstmt: 'return' (expr)*;

// below generated by AI
methodCall:
	ID '(' (expr+ (',' expr+)*)? ')' ';'? // Method call without assignment
	| TYPE? ID '=' ID '(' (expr (',' expr)*)? ')' ';'?; // Method call with assignment

// below generated by AI
methodDef:
	TYPE ID '(' (TYPE ID (',' TYPE ID)*)? ')' '{' stmt* '}';

print: 'print' '(' '"'? expr? '"'? ')' ';';
println: 'println' '(' '"'? expr? '"'? ')' ';';

// Lexer Specification ==> Regular Expressions Only non-trivial expressions. Trivial token
// definitions are hard coded in grammar.
INT: '0' | ('-'?) ('1' ..'9') ('0' ..'9')*;
FLOAT: '0.0' | ('-'?) ('0' ..'9')* '.' ('0' ..'9')*;
BOOL: 'true' | 'false';
ID: ('a' ..'z' | 'A' ..'Z' | '_')+;
// stirng and char
STRING: '"' (~'"')* '"';
CHAR: '\'' ~'\'' '\'';
WS: [ \t\r\n]+ -> skip;

// is there a way to esacpe the empty space trailing the type? yes, add WS
TYPE:
	' '? (
		'int'
		| 'float'
		| 'bool'
		| 'void'
		| 'char'
		| 'string'
		| 'int[]'
		| 'float[]'
		| 'bool[]'
		| 'char[]'
		| 'string[]'
	) ' '?;

// line below generated by AI
COMMENT: '#' (~[\r\n])* -> skip;