/**
 * Define a grammar called Expressions
 */
grammar Expressions;

@header {    // Define name of package for generated Java files. 
    package generated;
}

// Syntax Specification ==> Context-free Grammar
start: methodDef* maindef methodDef*;

maindef: 'void main' paramList '{' stmt* '}';

stmt:
	expr ';'
	| assign
	| declare
	| ifstmt
	| whilestmt
	| print
	| methodDef
	| methodCall
	| returnstmt;

expr:
	'(' expr ')'
	| expr ('*' | '/') expr
	| expr ('+' | '-') expr
	// Line below generated by AI
	| expr ('>' | '<' | '>=' | '<=' | '==' | '!=') expr
	| (INT | FLOAT | BOOL | ID | STRING | CHAR)
	| ID '[' expr+ ']' // array indexing
	| ID '.length' // array length
	| 'new' TYPE '[' expr? ']'
	| methodCall;

// common blocks
stmtBlock: '{'? stmt* '}'?;
exprBlock: '(' expr ')';
param: TYPE? ID;
paramList: '(' (param (',' param)*)? ')';
exprList: expr (',' expr)*;

// stmt
ifstmt: 'if' exprBlock stmtBlock elsePart?;
elsePart: 'else' (ifstmt | stmtBlock);
whilestmt: 'while' exprBlock stmtBlock;
returnstmt: 'return' (expr)*;
print: 'print' 'ln'? '(' '"'? expr? '"'? ')' ';';

declare: param ('[' ']')? ';';
assign:
	param ('[' expr ']')? '=' (expr | '{' exprList? '}') ';';

methodCall:
	ID '(' (expr+ (',' expr+)*)? ')' ';'? // Method call without assignment
	| param '=' ID '(' exprList? ')' ';'?; // Method call with assignment

methodDef: param paramList stmtBlock;

// Lexer Specification ==> Regular Expressions Only non-trivial expressions. Trivial token
// definitions are hard coded in grammar.
INT: '0' | ('-'?) ('1' ..'9') ('0' ..'9')*;
FLOAT: '0.0' | ('-'?) ('0' ..'9')* '.' ('0' ..'9')*;
BOOL: 'true' | 'false';
ID: ('a' ..'z' | 'A' ..'Z' | '_')+;
// stirng and char by AI
STRING: '"' [a-zA-Z!.,?=:() ]* '"';
CHAR: '\'' [a-zA-Z!.,?=:() ] '\'';
WS: [ \t\r\n]+ -> skip;

// is there a way to esacpe the empty space trailing the type? yes, add WS
TYPE:
	' '? (
		'int'
		| 'float'
		| 'bool'
		| 'void'
		| 'char'
		| 'string'
		| 'int[]'
		| 'float[]'
		| 'bool[]'
		| 'char[]'
		| 'string[]'
	) ' '?;

// line below generated by AI
COMMENT: '#' (~[\r\n])* -> skip;