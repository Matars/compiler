/**
 * Main.java
 * 10 sep. 2023
 * jlnmsi
 * 
 * Starting point for the ofp compiler
 */
package ofppackage;

import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.io.FileWriter;
import java.io.FileOutputStream;

import org.antlr.v4.gui.Trees;
import org.antlr.v4.runtime.BufferedTokenStream;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.tree.ParseTreeProperty;
import org.antlr.v4.runtime.tree.ParseTreeWalker;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.util.CheckClassAdapter;
import org.objectweb.asm.util.TraceClassVisitor;

import generated.OFPLexer;
import generated.OFPParser;

public class main extends ClassLoader implements Opcodes {

    public static void main(String[] args) throws IllegalAccessException, InvocationTargetException, SecurityException {

        // Select test program
        // get cwd
        String cwd = System.getProperty("user.dir");
        String testDir = cwd + "/ofp_test_assignment4/";
        String fileName = "tmp.ofp";
        String testProgram = testDir + fileName;

        // Check if input ends with ".ofp"
        if (!testProgram.endsWith(".ofp")) {
            System.out.println("\nPrograms most end with suffix .ofp! Found " + testProgram);
            System.exit(-1);
        }
        System.out.println("Reading test program from: " + testProgram);

        // Parse input program
        System.out.println("\nParsing started");
        OFPParser parser = null;
        OFPParser.StartContext root = null;
        try {
            CharStream inputStream = CharStreams.fromFileName(testProgram);
            OFPLexer lexer = new OFPLexer(inputStream);
            parser = new OFPParser(new BufferedTokenStream(lexer));
            root = parser.start();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("\nParsing completed");

        // Display tree
        // Trees.inspect(root, parser);

        // Walk tree
        System.out.println("\nWalking tree started");
        ParseTreeWalker walker = new ParseTreeWalker();
        // PrintListener PrintListener = new PrintListener();
        System.out.println();
        System.out.println();

        BuildSymbolListener buildSymb = new BuildSymbolListener();

        checkSymbolListener checkSymb = new checkSymbolListener();

        System.out.println("Building symbol table");
        walker.walk(buildSymb, root);

        System.out.println();
        System.out.println();

        ParseTreeProperty<Scope> scopes = buildSymb.getScopes();
        checkSymb.setScopes(scopes);

        walker.walk(checkSymb, root);

        TypeCheckVisitor typeCheck = new TypeCheckVisitor();
        typeCheck.setScopes(scopes);
        typeCheck.visit(root);

        // PythonCodeGenerator translation = new PythonCodeGenerator();
        // translation.setScopes(scopes);
        // String code = translation.visit(root);

        // Write the buffer content to a file

        // String outputPath = "pyGenerated/" + fileName.replace(".ofp", ".py");
        // try (FileWriter writer = new FileWriter(outputPath)) {
        // writer.write(code);
        // } catch (IOException e) {
        // e.printStackTrace();
        // }

        // After type checking
        System.out.println("\nBytecode generation started");
        BytecodeGenerator bcGen = new BytecodeGenerator(scopes, fileName.replace(".ofp", ""));
        bcGen.visit(root);

        // Get and save the bytecode
        byte[] code = bcGen.getBytecode();
        String outputPath = "ByteCodeGenerated/" + fileName.replace(".ofp", ".class");
        try (FileOutputStream outputStream = new FileOutputStream(outputPath)) {
            outputStream.write(code);
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Optional: Verify and execute the generated bytecode
        ClassReader cr = new ClassReader(code);
        ClassVisitor tracer = new TraceClassVisitor(new PrintWriter(System.out));
        ClassVisitor checker = new CheckClassAdapter(tracer, true);
        cr.accept(checker, 0);

        // Execute the generated code
        main loader = new main();
        Class<?> exampleClass = loader.defineClass(fileName.replace(".ofp", ""),
                code, 0, code.length);

        exampleClass.getMethods()[0].invoke(null, new Object[] { null });

    }
}